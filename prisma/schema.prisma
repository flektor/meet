// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Channel {
    id          String    @id @default(cuid())
    title       String?
    description String?
    createdAt   DateTime  @default(now())
    Users       User[]
    Message     Message[]
    activity    Activity?
    Group       Group?
}

model Activity {
    id             String           @id @default(cuid())
    slug           String           @unique
    title          String           @unique
    description    String
    createdAt      DateTime         @default(now())
    Favorites      Favorites[]
    Registrations  Registrations[]
    channelId      String           @unique
    channel        Channel          @relation(fields: [channelId], references: [id])
    ActivityViewer ActivityViewer[]
    groups         Group[]
}

model Favorites {
    userId     String
    activityId String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId])
}

model Group {
    id            String          @id @default(cuid())
    slug          String          @unique
    title         String          @unique
    description   String
    createdAt     DateTime        @default(now())
    userId        String
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    channelId     String          @unique
    channel       Channel         @relation(fields: [channelId], references: [id])
    GroupViewer   GroupViewer[]
    PendingInvite PendingInvite[]
    activityId    String
    activity      Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
    Membership    Membership[]

    @@unique([id, userId, activityId])
}

model Membership {
    userId  String
    groupId String
    user    User   @relation(fields: [userId], references: [id])
    group   Group  @relation(fields: [groupId], references: [id])

    @@id([userId, groupId])
}

model PendingInvite {
    userId    String
    groupId   String
    group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, groupId])
}

model GroupViewer {
    userId  String @unique
    groupId String
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, groupId])
}

model ActivityViewer {
    userId     String
    activityId String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId])
}

model Registrations {
    userId     String
    activityId String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId])
}

model Message {
    id        String   @id @default(cuid())
    content   String
    sentAt    DateTime @default(now())
    sentBy    String
    channelId String
    User      User     @relation(fields: [sentBy], references: [id], onDelete: Cascade)
    Channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

    @@unique([id, channelId, sentBy])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Favorites      Favorites[]
    Registrations  Registrations[]
    channelId      String?
    Message        Message[]
    Channel        Channel?         @relation(fields: [channelId], references: [id])
    ActivityViewer ActivityViewer[]
    PendingInvite  PendingInvite[]
    Group          Group[]
    GroupViewer    GroupViewer?
    Membership     Membership[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
