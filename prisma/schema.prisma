// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Channel {
    id          String    @id @default(cuid())
    title       String?
    description String?
    createdAt   DateTime  @default(now())
    activity    Activity?
    group       Group?
    messages    Message[]
}

model Activity {
    id            String           @id @default(cuid())
    slug          String           @unique
    createdBy     String
    title         String           @unique
    description   String
    createdAt     DateTime         @default(now())
    channelId     String           @unique
    channel       Channel          @relation(fields: [channelId], references: [id])
    user          User             @relation(fields: [createdBy], references: [id])
    viewers       ActivityViewer[]
    groups        Group[]
    favorites     Favorite[]
    registrations Registration[]

    @@index([createdBy])
}

model Favorite {
    userId     String
    activityId String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId])
    @@index([activityId])
}

model Group {
    id             String          @id @default(cuid())
    slug           String          @unique
    activityId     String
    title          String          @unique
    createdBy      String
    description    String
    createdAt      DateTime        @default(now())
    channelId      String          @unique
    channel        Channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)
    activity       Activity        @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user           User            @relation(fields: [createdBy], references: [id])
    viewers        GroupViewer[]
    pendingInvites PendingInvite[]
    memberships    Membership[]

    @@unique([id, activityId])
    @@index([activityId])
    @@index([createdBy])
}

model Membership {
    userId  String
    groupId String
    user    User   @relation(fields: [userId], references: [id])
    group   Group  @relation(fields: [groupId], references: [id])

    @@id([userId, groupId])
    @@index([groupId])
    @@index([userId])
}

model PendingInvite {
    userId    String
    groupId   String
    group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, groupId])
    @@index([groupId])
}

model GroupViewer {
    userId  String @unique
    groupId String
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, groupId])
    @@index([groupId])
}

model ActivityViewer {
    userId     String   @unique
    activityId String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId])
    @@index([activityId])
}

model Registration {
    userId     String
    activityId String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, activityId])
    @@index([activityId])
}

model Message {
    id        String   @id @default(cuid())
    content   String
    sentAt    DateTime @default(now())
    sentBy    String
    channelId String
    user      User     @relation(fields: [sentBy], references: [id], onDelete: Cascade)
    channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

    @@unique([id, channelId, sentBy])
    @@index([sentBy])
    @@index([channelId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    activityViewer ActivityViewer?
    groupViewer    GroupViewer?
    accounts       Account[]
    sessions       Session[]
    favorites      Favorite[]
    registrations  Registration[]
    messages       Message[]
    pendingInvites PendingInvite[]
    memberships    Membership[]
    activities     Activity[]
    groups         Group[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
